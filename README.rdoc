= Grant

Grant is a Ruby gem and Rails plugin that forces you to make explicit security decisions about the operations performed on your ActiveRecord models. It provides a declarative way to specify rules granting permission to perform CRUD operations on ActiveRecord objects. 

Grant does not allow you to specify which operations are restricted. Instead, it restricts all CRUD operations unless they're explicitly granted to the user. Only allowing operations explicitly granted forces you to make conscious security decisions. Grant will not help you make those decisions, but it won't let you forget to.

Additional information beyond that found in this README is available on the wiki[https://github.com/nearinfinity/grant/wiki].

= Installation

To install the Grant gem, simply run

  gem install grant
  
To use it with a Rails 3 project or other project using Bundler, add the following line to your Gemfile

  gem 'grant'
  
For your Rails 2.x project, add the following to your environment.rb file

  config.gem 'grant'

Lastly, Grant can also be installed as a Rails plugin
  
  script/plugin install git://github.com/nearinfinity/grant.git

= Setup

Grant needs to know who the current user is, but with no standard for doing so you'll have to do a little work to set things up. You simply need to set your current user model object as the Grant current user before any CRUD operations are performed. For example, in a Rails application you could add the following to your application_controller.rb

  class ApplicationController < ActionController::Base
    before_filter :set_current_user
    
    private
    
    def set_current_user
      Grant::User.current_user = @current_user
    end
  end

= Usage

To enable model security you simply include the Grant::ModelSecurity module in your model class. In the example below you see two grant statements. The first grants find (aka read) permission all the time. The second example grants create, update, and destroy permission when the passed block evaluates to true, which in this case happens when the model is editable by the current user. A Grant::Error is raised if any grant block evaluates to false or nil.

  class Book < ActiveRecord::Base
    include Grant::ModelSecurity
    
    has_many :tags
    grant(:find) { true }
    grant(:create, :update, :destroy) { |user, model| model.editable_by_user? user }
    
    def editable_by_user? user
      user.administrator? || user.has_role?(:editor) 
    end
  end

The valid actions to pass to a grant statement are :find, :create, :update, and :destroy. Each action can be passed as a Symbol or String. Any number of actions can be passed to a single grant statement, which is very useful if each of the actions share the same logic for determining access.

= Integration

There may be some instances where you need to perform an action on your model object without Grant stepping in and stopping you. In those cases you can include the Grant::Integration module for help.

  class BooksController < ApplicationController
    include Grant::Integration
    
    def update
      book = Book.find(params[:id])
      without_grant { book.update_attributes(params[:book]) } # Grant is disabled for the entire block
    end
  end

Copyright (c) 2010 Near Infinity Corporation, released under the MIT license
