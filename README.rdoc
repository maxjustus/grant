= Grant

Grant is a Ruby gem and Rails plugin that forces you to make explicit security decisions about the operations performed on your ActiveRecord models. It provides a declarative way to specify rules granting permission to perform CRUD operations on ActiveRecord objects. 

Grant does not allow you to specify which operations are restricted. Instead, it restricts all CRUD operations unless they're explicitly granted to the user. Only allowing operations explicitly granted forces you to make conscious security decisions. Grant will not help you make those decisions, but it won't let you forget to.

Additional information beyond that found in this README is available on the wiki[https://github.com/nearinfinity/grant/wiki].

= Installation

To install the Grant gem, simply run

  gem install grant
  
To use it with a Rails 3 project or other project using Bundler, add the following line to your Gemfile

  gem 'grant'
  
For your Rails 2.x project, add the following to your environment.rb file

  config.gem 'grant'

Lastly, Grant can also be installed as a Rails plugin
  
  script/plugin install git://github.com/nearinfinity/grant.git

= Setup

Grant needs to know who the current user is, but with no standard for doing so you'll have to do a little work to set things up. You simply need to set your current user model object as the Grant current user before any CRUD operations are performed. For example, in a Rails application you could add the following to your application_controller.rb

  class ApplicationController < ActionController::Base
    before_filter :set_current_user
    
    private
    
    def set_current_user
      Grant::User.current_user = @current_user
    end
  end

= Usage

To enable model security you simply include the Grant::ModelSecurity module in your model class. In the example below you see two grant statements. The first grants find (aka read) permission all the time, and permission to update every attribute all the time. The second example grants create, update, and destroy permission when the passed block evaluates to true, which in this case happens when the model is editable by the current user. A Grant::Error is raised if any grant block evaluates to false or nil.

  class Book < ActiveRecord::Base
    include Grant::ModelSecurity
    
    has_many :tags
    grant(:find, :attributes => :all) { true }
    grant(:create, :update, :destroy) { |user, model| model.editable_by_user? user }
    
    def editable_by_user?(user)
      user.administrator? || user.has_role?(:editor) 
    end
  end

The valid actions to pass to a grant statement are :find, :create, :update, and :destroy. The valid attributes to pass to a grant statement are those which correspond to columns in the database. Each action and attribute can be passed as a Symbol or String. Any number and combination of actions and model attributes can be passed to a single grant statement, which is very useful if each of the actions and attributes share the same logic for determining access.

You can also use the grant method to specify granular permissions for the user to change attributes on a model. The example below grants any user the ability to find and create, but only owners and administrators to update or destroy. It also grants any user the ability to update user_id when the book is a new record, but only administrators if it is not new. It grants anyone the ability to update :title and :price if the record is new or they own it, but it only allows administrators to update the list_in_store attribute. A Grant::Error is raised if any grant block evaluates to false or nil.

  class Book < ActiveRecord::Base
    include Grant::ModelSecurity
    
    has_many :tags
    grant(:find, :create) { true }
    grant(:update, :destroy) { |user, model| model.owned_by_user? user || user.administrator? }

    grant(:title, :price) { |user, model| model.new_record? || model.owned_by_user? user }
    grant(:user_id) { |user, model| model.new_record? || user.administrator? }
    grant(:list_in_store) { |user, model| user.administrator? }
    
    def owned_by_user?(user)
      user.administrator? || user.owns?(self)
    end
  end

If you happen to have a column name called find, create, update, or destroy you can explicitly define permissions on those attributes using the :attributes argument. This example grants permission to use the find and create actions, and to change the name, find, and create attributes

    class Book < ActiveRecord::Base
      grant(:find, :create, :attributes => [:name, :find, :create]) { true }
    end

In the event that you just want to grant permission to update all attributes you can use the argument :attributes => :all
    class Book < ActiveRecord::Base
      grant(:find, :create, :attributes => :all) { true }
    end

You can see what attributes and actions are granted for the current user to edit by using model.granted. This is useful in situations where you're using something like formtastic and want to make the form display only fields the user is granted to edit. You can use grantedwithout arguments to get all granted attributes and actions, or you can pass it a list of attributes and actions to check against, in which case it will return a hash of granted attributes and actions in the order of and limited to those passed. You can also pass :granted => false to get all ungranted attributes and actions, or a subset based on those passed in:

  <%= semantic_form_for book do |f| %>
    <%= f.inputs *book.granted(:title, :list_in_store, :price)[:attributes] %>

    <% ungranted = book.granted(:title, :list_in_store, :price, :granted => false) %>
    <% if ungranted.all? {|k,v| v.length > 0} %>
      You are not allowed to edit
      <%= ungranted[:attributes].join(', ') %>

      and are not permitted to 
      <%= ungranted[:actions].join(', ') %>
    <% end %>
  <% end %>

You can test whether a set of attributes and or actions are granted for the current user by using model.granted? with a list of attributes and actions to test against:

  <% if book.granted?(:destroy, :title) %>
    You can destroy this book and edit the title!
  <% end %>

  <% if book.granted?(:title) %>
    You can edit the title!
    %p
      f.label :title
      f.check_box :title
  <% end %>

  <% if book.granted?(:list_in_store, :price) %>
    You can edit the price and whether this book is listed in the store!
    %p
      f.label :list_in_store
      f.check_box :list_in_store
    %p
      f.label :price
      f.text_field :price
  <% end %>

= Integration

There may be some instances where you need to perform an action on your model object without Grant stepping in and stopping you. In those cases you can include the Grant::Integration module for help.

  class BooksController < ApplicationController
    include Grant::Integration
    
    def update
      book = Book.find(params[:id])
      without_grant { book.update_attributes(params[:book]) } # Grant is disabled for the entire block
    end
  end

Copyright (c) 2010 Near Infinity Corporation, released under the MIT license
